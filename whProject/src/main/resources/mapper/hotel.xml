<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="co.admin.wh.hotel.mapper.HotelMapper">

	<!-- 메인 : 좋아요순 사진 셀렉 -->
	<select id="mainList" parameterType="HotelVO"
		resultType="co.admin.wh.hotel.vo.HotelVO">

		SELECT h.IMG1 , h.hotel_name, h.hotel_region, h.hotel_id
		FROM HOTEL h
		LEFT JOIN GREAT g ON h.HOTEL_ID = g.GREAT_N_CODE
		GROUP BY h.IMG1, h.hotel_name, h.hotel_region, h.hotel_id
		ORDER BY h.IMG1 DESC
		FETCH FIRST 3 ROWS ONLY
	</select>
	
	<!-- 크롤링 후 DB저장 -->
	<insert id="insertHotelInfo">
		<selectKey resultType="int" keyProperty="hotelId"
			order="BEFORE">
			SELECT NVL(MAX(hotel_Id),0)+1 FROM HOTEL
		</selectKey>
		MERGE INTO HOTEL
		USING (
		SELECT #{hotelId} AS hotel_id,
		#{hotelName} AS hotel_name,
		#{star} AS star,
		#{hotelAddr} AS hotel_addr,
		#{hotelRegion} AS hotel_region,
		#{roomGrade} AS room_grade,
		#{roomPrice} AS room_price,
		#{roomLimit} AS room_limit,
		#{img1} AS img1,
		#{img2} AS img2,
		#{img3} AS img3,
		#{img4} AS img4,
		#{img5} AS img5
		FROM DUAL
		) new
		ON (HOTEL.hotel_name = new.hotel_name)
		WHEN MATCHED THEN
		UPDATE SET HOTEL.room_price = new.room_price,
		hotel.room_grade = new.room_grade
		WHEN NOT MATCHED THEN
		INSERT (hotel_id, hotel_name, star, hotel_addr, hotel_region, room_grade,
		room_price, room_limit, img1, img2, img3, img4, img5)
		VALUES (new.hotel_id, new.hotel_name, new.star,
		new.hotel_addr, 
		new.hotel_region, new.room_grade,
		new.room_price, new.room_limit, new.img1,
		new.img2, new.img3, new.img4, new.img5)
	</insert>

	<!-- 전체 호텔 리스트 출력 -->
	<select id="hotelList" resultType="co.admin.wh.hotel.vo.HotelVO">
		SELECT * FROM( SELECT rownum rn, a.* FROM(
		select *
		from hotel
		order by hotel_id
		<![CDATA[
		) a WHERE rownum <= #{last} ) b WHERE rn >= #{first}		
		]]>
	</select>

	<!-- 예약 가능한 호텔 검색 리스트 -->
	<select id="hotelSearchList"
		resultType="co.admin.wh.hotel.vo.HotelVO">
	SELECT * FROM( SELECT rownum rn, a.* FROM(
        SELECT h.*
		FROM hotel h
		LEFT JOIN reservation r ON h.hotel_id = r.hotel_id
		WHERE ((r.check_in IS NULL and r.check_out IS NULL)
		   OR (#{checkIn} NOT BETWEEN r.check_in AND r.check_out AND #{checkOut} NOT BETWEEN r.check_in AND r.check_out))
		   <choose>
		   		<!-- 제주로 검색하면 서귀포도 함께 검색되도록 -->
			   <when test="hotelRegion == '제주'">
			   AND (h.hotel_region = '제주' or h.hotel_region = '서귀포')
			   </when>
		   	   <otherwise>
		   	   AND h.hotel_region = #{hotelRegion}
		   	   </otherwise>
		   </choose>
		  AND h.room_limit >= #{humanCount}
		  and (h.room_price between #{priceRangeMin} and #{priceRangeMax})
	<![CDATA[
	) a WHERE rownum <= #{last} ) b WHERE rn >= #{first}		
	]]>
	</select>

	<select id="CrawlingList"
		resultType="co.admin.wh.hotel.vo.HotelVO">
		SELECT * FROM( SELECT rownum rn, a.* FROM(
		select a.*
		from (
		select * from hotel order by hotel_id desc) a
      	<![CDATA[
		) a WHERE rownum <= #{last} ) b WHERE rn >= #{first}		
		]]>
	</select>

	<!-- 전체 건수 조회 -->
	<select id="getCountTotal"
		parameterType="co.admin.wh.hotel.vo.HotelSearchVO" resultType="int">
		SELECT
		COUNT(*) FROM HOTEL
	</select>

	<!-- 상세페이지 -->
	<select id="detailSelect"
		resultType="co.admin.wh.hotel.vo.HotelVO">
		select *
		from hotel
		where hotel_id = #{hotelId}
	</select>

	<!-- 예약 -->
	<insert id="insertReservInfo"
		parameterType="co.admin.wh.hotel.vo.ReservationVO">
		<selectKey resultType="int" keyProperty="resId"
			order="BEFORE">
			SELECT NVL(MAX(res_Id),0)+1 FROM RESERVATION
		</selectKey>
		insert into Reservation
		values
		(#{resId},#{childCount},#{humanCount},#{resName},#{resTel},#{resEmail},#{resRequest},#{checkIn}+1,#{checkOut}+1,sysdate,#{totalPay},#{id},0,#{hotelId})
	</insert>

	<!-- 예약정보 조회 -->
	<select id="readReservInfo"
		resultType="co.admin.wh.hotel.vo.ReservationVO" parameterType="String">
		select r.*, h.*
		from Reservation r, Hotel h
		where id = #{sessionId}
		and h.hotel_id = r.hotel_id
		and r.res_state = 0
	    <![CDATA[
	    and r.check_out >= sysdate
	    ]]>
	</select>

	<!-- 취소내역조회 -->
	<select id="readCancelReservInfo"
		resultType="co.admin.wh.hotel.vo.ReservationVO" parameterType="String">
		select
		r.*, h.*
		from Reservation r, Hotel h
		where id = #{sessionId}
		and h.hotel_id = r.hotel_id
		and r.res_state = 1
	</select>

	<!-- 예약취소신청 / 취소승인 -->
	<update id="hotelCancel"
		parameterType="co.admin.wh.hotel.vo.CancelVO">
		update reservation
		<set>
			<choose>
				<when test="resState == 0"> <!-- 회원이 예약취소신청 했을 때 -->
					res_state = 1
				</when>
				<when test="resState == 1"> <!-- 관리자가 취소승인할 때 -->
					res_state = 2
				</when>
				<otherwise>
					res_state = res_state
				</otherwise>
			</choose>
		</set>
		where res_id=#{resId}
	</update>
	
	<!-- 회원이 예약취소신청 시 취소 테이블에 취소정보 인서트 -->
	<select id="insertCancelInfo" parameterType="co.admin.wh.hotel.vo.CancelVO">
		insert into cancel(res_id,submit_date)
		values (#{resId},sysdate)
	</select>

	<!-- 예약자 정보 변경 -->
	<update id="ReservUpdate"
		parameterType="co.admin.wh.hotel.vo.ReservationVO">
		update reservation
		<set>
			<if test="resName != null">res_name = #{resName},</if>
			<if test="resTel != null">res_tel = #{resTel},</if>
			<if test="resEmail != null">res_email = #{resEmail},</if>
			<if test="resRequest != null">res_request = #{resRequest}</if>
		</set>
		where res_id=#{resId}
	</update>

	<!-- 검색어 자동완성 -->
	<select id="autocomplete" parameterType="map" resultType="map">
		select
		distinct hotel_name, hotel_id
		from hotel
		where hotel_name like '%'||
		(#{value}) ||'%'
	</select>

	<!-- 낮은가격순 정렬 -->
	<select id="priceList" parameterType="HotelVO"
		resultType="co.admin.wh.hotel.vo.HotelVO">
		SELECT * FROM( SELECT rownum rn, a.* FROM(
		select *
		from hotel
		order by room_price asc
	    <![CDATA[
		) a WHERE rownum <= #{last} ) b WHERE rn >= #{first}		
		]]>
	</select>

	<!-- 높은가격순 정렬 -->
	<select id="priceListDesc" parameterType="HotelVO"
		resultType="co.admin.wh.hotel.vo.HotelVO">
		SELECT * FROM( SELECT rownum rn, a.* FROM(
		select *
		from hotel
		order by room_price desc
	    <![CDATA[
		) a WHERE rownum <= #{last} ) b WHERE rn >= #{first}		
		]]>
	</select>

	<!-- 별점순 정렬 -->
	<select id="starRatingList" parameterType="HotelVO"
		resultType="co.admin.wh.hotel.vo.HotelVO">
		SELECT * FROM( SELECT rownum rn, a.* FROM(
		select *
		from hotel
		order by star desc
	    <![CDATA[
		) a WHERE rownum <= #{last} ) b WHERE rn >= #{first}		
		]]>
	</select>

	<!-- 좋아요순 정렬 -->
	<select id="goodRatingList" parameterType="HotelVO"
		resultType="co.admin.wh.hotel.vo.HotelVO">
		SELECT * FROM( SELECT rownum rn, a.* FROM(
		SELECT h.HOTEL_ID, h.HOTEL_NAME, h.STAR, h.HOTEL_ADDR,
		h.HOTEL_REGION, h.ROOM_GRADE, h.ROOM_PRICE, h.ROOM_LIMIT,
		h.IMG1, h.IMG2, h.IMG3, h.IMG4, h.IMG5, COUNT(g.GREAT_N_CODE) as GREAT_COUNT
		FROM HOTEL h
		LEFT JOIN GREAT g
		ON h.HOTEL_ID = g.GREAT_N_CODE
		GROUP BY h.HOTEL_ID, h.HOTEL_NAME, h.STAR, h.HOTEL_ADDR,
		h.HOTEL_REGION, h.ROOM_GRADE, h.ROOM_PRICE, h.ROOM_LIMIT,
		h.IMG1, h.IMG2, h.IMG3, h.IMG4, h.IMG5
		ORDER BY GREAT_COUNT DESC
		<![CDATA[
		) a WHERE rownum <= #{last} ) b WHERE rn >= #{first}		
		]]>
	</select>

	<!-- 호텔이름검색 -->
	<select id="hotelNameSearchList"
		resultType="co.admin.wh.hotel.vo.HotelVO">
		SELECT * FROM( SELECT rownum rn, a.* FROM(
		select *
		from hotel
		where hotel_name like '%'|| (#{hotelName}) ||'%'
	    <![CDATA[
		) a WHERE rownum <= #{last} ) b WHERE rn >= #{first}		
		]]>
	</select>

	<!-- 지난예약내역조회 -->
	<select id="readFinReservInfo"
		resultType="co.admin.wh.hotel.vo.ReservationVO" parameterType="String">
		select r.*, h.*
		from Reservation r, Hotel h
		where id = #{sessionId}
		and h.hotel_id = r.hotel_id
		and r.res_state = 0
	    <![CDATA[
	    and r.check_out < sysdate
	    ]]>
	</select>

	<!-- 관리자 -->
	<!-- 관리자 예약내역 전체조회 -->
	<select id="adminReservList"
		resultType="co.admin.wh.hotel.vo.CancelVO">
		select *
		from reservation r
		inner join hotel h on r.hotel_id = h.hotel_id
		left join cancel c on r.res_id = c.res_id
		order by r.res_state desc

	</select>
	
	<!-- 관리자 예약내역 검색 -->
	   <select id="adminSearch" resultType="co.admin.wh.hotel.vo.CancelVO">
	  select *
	  from reservation r
	  inner join hotel h on r.hotel_id = h.hotel_id
	  left join cancel c on r.res_id = c.res_id
		<if test="checkIn != null and checkOut != null">
			where (#{checkIn} BETWEEN r.check_in AND r.check_out
	   		AND #{checkOut} BETWEEN r.check_in AND r.check_out)
		</if>
	    <if test="option == 'id'.toString()">
	      and r.res_id like '%'|| (#{content}) ||'%'
	    </if>
	    <if test="option == 'hotelName'.toString()">
	      and h.hotel_name like '%'|| (#{content}) ||'%'
	    </if>
	    <if test="option == 'grade'.toString()">
	      and h.room_grade like '%'|| (#{content}) ||'%'
	    </if>
	    <if test="option == 'resName'.toString()">
	      and r.res_name like '%'|| (#{content}) ||'%'
	    </if>
	    <if test="option == 'tel'.toString()">
	      and r.res_tel like '%'|| (#{content}) ||'%'
	    </if>
	    <if test="option == 'email'.toString()">
	      and r.res_email like '%'|| (#{content}) ||'%'
	    </if>
	</select>
	
	<!-- 관리자 취소승인 할 때 취소 테이블에 환불정보 업데이트 -->
	<update id="updateCancelInfo" parameterType="co.admin.wh.hotel.vo.CancelVO">
		update cancel
		<set>
			<if test="returnPay != null">return_pay = #{returnPay},</if>
			apply_date = sysdate
		</set>
		where res_id = #{resId}
	</update>

<!-- 예약 전 날짜 비교(이미 해당 방에 예약내역 있으면 false) => select 내역 없으면 예약안됨 -->
	<select id="compareToDate" resultType="co.admin.wh.hotel.vo.ReservationVO">
	   SELECT h.*
	   FROM hotel h 
	   LEFT JOIN reservation r 
	   ON h.hotel_id = r.hotel_id 
	   WHERE ((r.check_in IS NULL and r.check_out IS NULL)
	   OR (#{checkIn} NOT BETWEEN r.check_in AND r.check_out - INTERVAL '1' DAY
	   		AND #{checkOut} NOT BETWEEN r.check_in AND r.check_out))
	   and h.hotel_id=#{hotelId}
	</select>

</mapper>